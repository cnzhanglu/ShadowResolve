# This is a basic workflow to help you get started with Actions

name: ShadowResolve-build

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "1.6-ICP" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            version: '3.7'  # 使用最新的 Python 3.x 版本
          - os: windows-latest
            version: '3.7'  # 使用最新的 Python 3.x 版本
          - os: macos-latest
            version: '3.11'  # 使用最新的 Python 3.x 版本

    steps:

      # Check-out repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Setup Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.version }} # Version range or exact version of a Python version to use, using SemVer's version range syntax
          architecture: 'x64' # optional x64 or x86. Defaults to x64 if not specified
          cache: 'pip'
          cache-dependency-path: |
            **/requirements*.txt
            ubuntu/**/requirements*.txt
            windows/**/requirements*.txt
            macos/**/requirements*.txt

      # Install dependencies
      - name: Install Dependencies
        run: |
          pip install -r requirements.txt

      # Build python script into a stand-alone exe
      - name: Build Executable Windows
        if: matrix.os == 'windows-latest'
        uses: Nuitka/Nuitka-Action@main
        with:
          nuitka-version: main
          script-name: Query.py
          onefile: false
          standalone: true
          output-dir: o

      # Build python script into a stand-alone exe
      - name: Build Executable Linux
        if: matrix.os == 'ubuntu-latest'
        uses: Nuitka/Nuitka-Action@main
        with:
          nuitka-version: main
          script-name: Query.py
          onefile: false
          standalone: true
          output-dir: o
      # Build python script into a stand-alone exe
      - name: Build Executable macos
        if: matrix.os == 'macos-latest'
        uses: Nuitka/Nuitka-Action@main
        with:
          nuitka-version: main
          script-name: Query.py
          onefile: false
          standalone: true
          output-dir: o

      - name: Compress files windows
        if: matrix.os == 'windows-latest'
        run: |
          Copy-Item -Path "o\Query.dist" -Destination "o\ShadowResolve"
          Compress-Archive -Path "o\ShadowResolve" -DestinationPath "ShadowResolve_win.zip"

      - name: Compress files linux
        if: matrix.os == 'Ubuntu-latest'
        run: |
          mv o/Query.dist o/ShadowResolve
          tar -zcvf ShadowResolve_linux.tar.gz -C o ShadowResolve

      - name: Compress files macos
        if: matrix.os == 'macos-latest'
        run: |
          mv o/Query.dist o/ShadowResolve
          tar -zcvf ShadowResolve_macos.tar.gz -C o ShadowResolve

      - name: Upload Artifacts for Ubuntu
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v3
        with:
          name: ${{ runner.os }} Build
          path: |
            ShadowResolve_linux.tar.gz

      - name: Upload Artifacts for Windows
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v3
        with:
          name: ${{ runner.os }} Build
          path: |
            ShadowResolve_win.zip

      - name: Upload Artifacts for MacOS
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v3
        with:
          name: ${{ runner.os }} Build
          path: |
            ShadowResolve_macos.tar.gz

  create_release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Get Current Date
        id: get_date
        run: echo "::set-output name=date::$(date +%Y-%m-%d)"

      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          name: |
            ShadowResolve_linux.tar.gz
            ShadowResolve_win.zip
            ShadowResolve_macos.tar.gz
          path: artifacts

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
        with:
          tag_name: preview-${{ steps.get_date.outputs.date }}-${{ github.run_id }}
          release_name: Development Preview Release ${{ steps.get_date.outputs.date }}-${{ github.run_id }}
          body: Release notes go here
          draft: false
          prerelease: true

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: |
            ShadowResolve_linux.tar.gz
            ShadowResolve_win.zip
            ShadowResolve_macos.tar.gz
          asset_name: |
            ShadowResolve_linux.tar.gz
            ShadowResolve_win.zip
            ShadowResolve_macos.tar.gz
          asset_content_type: application/octet-stream
